---
title: 'Structuring College Access'
subtitle: 'The Market Segment Model and College Board Geomarkets'
author: ['Online Appendix']
format:
  revealjs:
    theme: [default, ./assets/css/custom.scss]
    controls: true
    controls-layout: bottom-right
    controls-tutorial: true
    transition: slide
    background-transition: fade
    auto-stretch: false
    slide-level: 3
    menu:
      titleSelector: 'h1, h2, .slide:not(.hide) h3'
      useTextContentForMissingTitles: false
      hideMissingTitles: true
    template-partials:
      - ./assets/html/title-slide.html
include-in-header: ./assets/html/header.html
---


```{r setup, echo=FALSE, results = 'asis', eval = TRUE}
library(tidyverse)
library(kableExtra)  # For collapse_rows() to work
library(tools)

knitr::opts_chunk$set(echo = FALSE, message = FALSE)

# Example directories
graphs_dir <- file.path(".", "results", "graphs")
tables_dir <- file.path(".", "results", "tables")
```


# Market Segment Model

### Market Segment Profile
#### Connecticut Market 3: Fairfield County (simplified example)

```{r}
market_segment <- data.frame(
  activity = c('Total test takers','Avg SAT (verbal + math)','Avg # scores sent per test taker','Percent in top 20% of HS class','Percent aspiring to more than BA','Percent family income more than $35,000','Percent both parents with BA'),
  local = c(550,770,2.8,27.8,30.6,11.2,9.0),
  in_state = c(1199,850,3.5,26.1,41.5,20.6,16.3),
  regional = c(1664,970,4.8,44.7,54.5,41.9,34.0),
  national = c(3766,980,5.3,45.7,62.2,43.0,37.1)
)

kbl(
  x = market_segment,
  col.names = c('Characteristic','Local','In-state','Regional','National')
)
```


### Institutional Profile
#### Connecticut Market 3: Fairfield County (simplified example for anonymous institution)

```{r}
sample_inst <- data.frame(
  characteristic = c('Total number of scores received','Pct of all test-takers in segment','lib_arts_num','lib_arts_share','engineering_num','engineering_share'),
  local = c(1,0.2,0,0.0,0,0.0),
  in_state = c(58,4.8,25,8.4,2,3.0),
  regional= c(69,4.1,35,7.0,5,5.8),
  national = c(109,2.9,61,5.3,3,0.8),
  total = c(237,3.3,121,5.9,10,1.8)
)

kable(
  x = sample_inst,
  col.names = c('','Local','In-state','Regional','National','Total')
)
```


# Results

```{r results, echo=FALSE, results = 'asis', eval = TRUE}
# Revised insert_figure() that does NOT print a heading
insert_figure <- function(rq, metro, graph_type, base_path = graphs_dir) {

  # We'll use 'metro' directly since it's already underscored (e.g. "los_angeles").
  fig_file  <- file.path(base_path, rq, stringr::str_c(rq, "_", metro, "_", graph_type, ".png"))
  cap_file  <- file.path(base_path, rq, stringr::str_c(rq, "_", metro, "_", graph_type, "_title.txt"))
  note_file <- file.path(base_path, rq, stringr::str_c(rq, "_", metro, "_", graph_type, "_note.txt"))

  # Print a heading/caption
  caption_text <- if (file.exists(cap_file)) readLines(cap_file, warn = FALSE) else "No Title Found"
  writeLines(paste0("#### ", caption_text))

  # Output the figure (if it exists)
  if (file.exists(fig_file)) {
    writeLines(stringr::str_c("![](", fig_file, ")\n"))
  } else {
    writeLines(paste("*(Missing figure file:", fig_file, ")*\n"))
  }

  # Print footnotes (if the .txt file exists)
  if (file.exists(note_file)) {
    notes_txt <- readLines(note_file, warn = FALSE)
    writeLines(
      stringr::str_c(
        "<div class=\"footnote\">",
        paste0(notes_txt, collapse = "</br>"),
        "</div>"
      )
    )
  }
}

insert_rq1_table <- function(metro) {
  table_df <- readRDS(file.path(tables_dir, str_c('rq1_table_', metro, '.rds')))
  table_df$value[is.na(table_df$value)] <- NA_real_
  
  var_order <- c(
    '% White, non-Hispanic', '% Asian, non-Hispanic', '% Black, non-Hispanic', '% Hispanic',
    '% Two+, non-Hispanic', '% NHPI, non-Hispanic', '% AIAN, non-Hispanic',
    'Median income', '% in poverty', '% with BA+'
  )
  
  race_df <- table_df %>% filter(statistic == 'sum', str_detect(variable, '^[^%]*Hispanic'), !str_detect(variable, 'API')) %>%
    group_by(eps_codename, year, statistic) %>% mutate(value = value / sum(value) * 100) %>% ungroup() %>% 
    mutate(
      variable = str_c('% ', variable),
      value = if_else((year == '1980' & str_detect(variable, 'Asian|NHPI|AIAN|Two')), NA_real_, value)
    )
  
  pov_df <- table_df %>% filter(statistic == 'sum', variable %in% c('Poverty', 'Not poverty')) %>%
    group_by(eps_codename, year, statistic) %>% mutate(value = value / sum(value) * 100) %>% ungroup() %>% 
    filter(variable == 'Poverty') %>% 
    mutate(variable = '% in poverty')
  
  edu_df <- table_df %>% filter(statistic == 'sum', variable %in% c('Less than HS', 'HS', 'Less than BA', 'BA+')) %>%
    group_by(eps_codename, year, statistic) %>% mutate(value = value / sum(value) * 100) %>% ungroup() %>% 
    filter(variable == 'BA+') %>% 
    mutate(variable = '% with BA+')
  
  table_df <- bind_rows(
    race_df, pov_df, edu_df,
    table_df %>% filter(variable %in% var_order, statistic != 'sum')
  ) %>% 
    mutate(
      statistic = factor(statistic, levels = c('sum', 'mean', 'sd', 'p25', 'p50', 'p75')),
      variable = factor(variable, levels = var_order),
      value = sprintf('%.1f', value)
    ) %>% 
    arrange(desc(year), statistic) %>% 
    pivot_wider(id_cols = c(eps_codename, variable), names_from = c(statistic, year), values_from = value) %>% 
    arrange(variable, desc(eps_codename))
  
  headings <- unique(table_df$variable)
  headings_group <- rep(nrow(table_df) / length(headings), length(headings))
  names(headings_group) <- headings
  
  kbl(table_df %>% select(-variable), escape = F, col.names = c('', rep(c('Wt. Mean', 'Mean', 'SD', 'P25', 'P50', 'P75'), 3))) %>% 
    pack_rows(index = headings_group, colnum = 1, label_row_css = '') %>% 
    add_header_above(header = c(' ' = 1, '1980' = 6, '2000' = 6, '2020' = 6))
}

insert_rq2_table <- function(metro, table_type, rq_name = 'rq2') {
  table_df <- readRDS(file.path(tables_dir, str_c(rq_name, '_table_', metro, '.rds')))[[table_type]]
  table_df[is.na(table_df)] <- NA_real_
  table_df$order_ids <- as_factor(table_df$order_ids)

  orders <- str_c(if_else(str_detect(unique(table_df$order_ids), '_'), 'Orders ', 'Order '), sub('_', ' & ', unique(table_df$order_ids)), ', ', unique(table_df$test_range))
  orders_group <- table(table_df$order_ids)
  names(orders_group) <- orders
  
  if (table_type == 'race') {
    tables_group <- rep(nrow(table_df) / length(orders) / length(unique(table_df$table)), length(unique(table_df$table)))
    names(tables_group) <- c('Count of purchased students', 'Purchased students by geomarket', 'Purchased students by racial/ethnic group')
  
    return(
      kbl(
        table_df %>%
          mutate(
            across(all, \(x) format(round(x, 0), big.mark = ',')),
            across(race_known, ~ if_else(table == 'col_pct_table' & eps_codename != 'All', sprintf('%.1f', .), format(round(., 0), big.mark = ','))),
            across(white:nhpi, ~ if_else(table == 'count_table' | (table == 'col_pct_table' & eps_codename == 'All'), format(round(., 0), big.mark = ','), sprintf('%.1f', .)))
          ) %>%
          select(-table, -order_ids, -test_range),
        align = 'lrrrrrrrrr', escape = F,
        col.names = c('', 'All', 'Race known', 'White', 'Asian', 'Black', 'Hispanic', '2+ races', 'AIAN', 'NHPI')
      ) %>% 
        pack_rows(index = orders_group, colnum = 1, label_row_css = 'background-color: #eaeaea; padding: 10px 7.5px;') %>% 
        pack_rows(index = rep(tables_group, length(orders)), colnum = 1, label_row_css = '')
    )
  } else if (table_type == 'firstgen') {
    tables_group <- rep(nrow(table_df) / length(orders) / length(unique(table_df$table)), length(unique(table_df$table)))
    names(tables_group) <- c('Count of purchased students', 'Purchased students by geomarket', 'Purchased students by first-generation status')
    
    return(
      kbl(
        table_df %>%
          mutate(
            across(all, \(x) format(round(x, 0), big.mark = ',')),
            across(known, ~ if_else(table == 'col_pct_table' & eps_codename != 'All', sprintf('%.1f', .), format(round(., 0), big.mark = ','))),
            across(no_col:not_first, ~ if_else(table == 'count_table' | (table == 'col_pct_table' & eps_codename == 'All'), format(round(., 0), big.mark = ','), sprintf('%.1f', .)))
          ) %>%
          select(-unknown, -table, -order_ids, -test_range),
        align = 'lrrrrr', escape = F,
        col.names = c('', 'All', 'First-gen known', 'No college', 'Some college', 'Not first-gen')
      ) %>% 
        pack_rows(index = orders_group, colnum = 1, label_row_css = 'background-color: #eaeaea; padding: 10px 7.5px;') %>% 
        pack_rows(index = rep(tables_group, length(orders)), colnum = 1, label_row_css = '')
    )
  } else if (table_type == 'race_firstgen') {
    x <- unique(table_df$eps_codename)  # Move "All" row to the end after rest of EPS rows
    table_df$eps_codename <- factor(table_df$eps_codename, levels = c(x[x != 'All'], 'All'))
    table_df <- table_df %>% arrange(order_ids, stu_race_cb, eps_codename)
    
    group_df <- table_df %>% group_by(order_ids, stu_race_cb) %>% summarise(n = n())
    race_group <- group_df$n
    names(race_group) <- str_replace(str_to_title(group_df$stu_race_cb), 'Or', 'or')
    
    return(
      kbl(
        table_df %>% 
          mutate(
            across(all, \(x) format(round(x, 0), big.mark = ',')),
            across(row_no_col:row_not_first_gen, \(x) sprintf('%.1f', x))
          ) %>% 
          select(-stu_race_cb, -order_ids, -test_range),
        align = 'lrrrr', escape = F,
        col.names = c('', 'All', 'No college', 'Some college', 'Not first-gen')
      ) %>% 
        pack_rows(index = orders_group, colnum = 1, label_row_css = 'background-color: #eaeaea; padding: 10px 7.5px;') %>% 
        pack_rows(index = race_group, colnum = 1, label_row_css = '')
    )
  }
}

# 2) Define your *underscored* metros / RQs
  metros <- c(
    "atlanta",
    "bay_area",
    "boston",
    "chicago",
    "cleveland",
    "dallas",
    "dc_maryland_virginia",
    "detroit",
    "houston",
    "long_island",
    "los_angeles",
    "miami",
    "new_york_city",
    "northern_new_jersey",
    "orange_county",
    "philadelphia",
    "san_diego"
  )

rqs <- c("rq1", "rq2")

# For RQ1, we have two plot types: "race" and "ses"
graph_types_rq1 <- c("race", "ses")

# For RQ2, we have two plot types: "race" and "firstgen"
graph_types_rq2 <- c("race", "firstgen")

# 3) Read the CSV (underscored metro column)
orders_df <- read_csv("scripts/metro_orders.csv")

# Derive the RQ2 metros from the CSV
rq2_metros <- unique(orders_df$metro)

# 4) Main loop
for (m in metros) {

  # Convert underscores -> spaces, then title case
  # But add special checks for "dc_maryland_virginia" and "bay_area"
  if (m == "dc_maryland_virginia") {
    heading_text <- "D.C., Maryland, and Virginia"
  } else if (m == "bay_area") {
    heading_text <- "Bay Area"
  } else {
    # Normal logic
    heading_text <- gsub("_", " ", m, fixed = TRUE)
    heading_text <- tools::toTitleCase(heading_text)
    heading_text <- str_c(heading_text, " area")
  }

  # Print a top-level heading for the metro area
  writeLines(str_c("## ", heading_text))

  for (rq in rqs) {
    
    # For clarity, parse out the numeric portion
    rq_num <- str_replace(string = rq, pattern = "rq", replacement = "")

    # ---------------------------------------------
    # RQ1 Logic
    # ---------------------------------------------
    if (rq == "rq1") {

      # Each metro has 2 plots: "race" & "ses"
      for (i in seq_along(graph_types_rq1)) {
        g <- graph_types_rq1[i]

        # The first RQ1 slide for a metro has a real heading;
        # subsequent ones are hidden slides (".hide")
        writeLines(str_c("### Research question ", rq_num, if_else(i == 1, "", " {.hide}")))
        insert_figure(rq = rq, metro = m, graph_type = g)
      }
      
      # Add RQ1 table
      writeLines(str_c("### Research question ", rq_num, " {.hide}"))
      writeLines(str_c("#### Racial/ethnic and socioeconomic characteristics of ", heading_text, " Geomarkets over time"))
      
      writeLines('<div class="table-wrapper freeze-pane">')
      writeLines(insert_rq1_table(m))
      writeLines('</div>')
      writeLines('<div class="footnote">Table Notes:<br>- Race/ethnicity categories not available in 1980 Census: Asian, non-Hispanic; Two+ races, non-Hispanic; NHPI, non-Hispanic; AIAN non-Hispanic<br>- Household income measured using 2024 CPI</div>')
      
      # Add RQ1 map
      writeLines(str_c("### Research question ", rq_num, " {.hide}"))
      writeLines(str_c("#### Racial/ethnic and socioeconomic characteristics of ", heading_text, " Geomarkets over time"))
      
      rq1_map <- str_c('./results/maps/rq1_map_', m, '.html')
      
      # For maps too big to push to GitHub
      if (!m %in% c("atlanta", "boston", "orange_county", "philadelphia", "san_diego")) {
        rq1_map <- paste0('https://rq1-map-', str_replace_all(m, '_', '-'), '.netlify.app')
      }
      
      writeLines(str_c('<iframe data-src="', rq1_map, '" src="about:blank" width=100% height=100% allowtransparency="true"></iframe>'))
      writeLines('<p class="fullscreen">Fullscreen</p>')
      writeLines('<div class="footnote">Figure Notes:<br>- Race/ethnicity categories not available in 1980 Census: Asian, non-Hispanic; Two+ races, non-Hispanic; NHPI, non-Hispanic; AIAN non-Hispanic<br>- Household income measured using 2024 CPI</div>')

    # ---------------------------------------------
    # RQ2 Logic (row vs. col approach + race_by_firstgen)
    # ---------------------------------------------
    } else if (rq == "rq2") {

      # Only run RQ2 code if the metro is in our RQ2 list
      if (!(m %in% rq2_metros)) next

      # Filter orders_df to just rows for this underscored metro
      df_metro <- filter(orders_df, metro == m)

      # If none, skip
      if (nrow(df_metro) == 0) next

      # Gather all the underscore-delimited order_ids
      orders_for_m <- df_metro$order_ids
      
      # -- HERE is the new line to remove "487927" --
      orders_for_m <- orders_for_m[ orders_for_m != "487927" ]  
      
      get_notes <- function(missing_txt = '') {
        str_replace(
          str_c('<div class="footnote">', paste0(readLines(file.path(graphs_dir, rq, str_c('rq2_', m, '_race_row_plot_note.txt')), warn = FALSE), collapse = "</br>"), '</div>'),
          'Excludes students with missing values for race\\. ', missing_txt
        )
      }

      # We'll do 2 group types: race & firstgen
      for (i in seq_along(graph_types_rq2)) {
        g <- graph_types_rq2[i]

        # We'll do row and col for each group type
        for (rc in c("row", "col")) {

          if (rc == "row") {
            #
            # ROW => single combined figure on one slide
            #
            writeLines(str_c("### Research question ", rq_num, if_else(i == 1, "", " {.hide}")))
            graph_type_row <- str_c(g, "_", rc, "_plot")
            insert_figure(rq = rq, metro = m, graph_type = graph_type_row)

          } else {
            #
            # COL => separate file(s) by order ID => each on its own slide
            #
            for (order_id in orders_for_m) {
              
              # Each order ID gets its own "###" => new Reveal.js slide
              writeLines(str_c("### Research question ", rq_num, " {.hide}"))
              
              graph_type_col <- str_c(g, "_", rc, "_plot_", order_id)
              insert_figure(rq = rq, metro = m, graph_type = graph_type_col)
            }
            
          } # end if (row vs col)

        } # end rc loop
        
        # Add RQ2 table
        writeLines(str_c("### Research question ", rq_num, " {.hide}"))
        writeLines(if_else(
          g == 'race',
          str_c('#### Racial/ethnic composition of purchased student profiles by Geomarket, ', heading_text),
          str_c('#### First-generation status of purchased student profiles by Geomarket, ', heading_text)
        ))

        writeLines('<div class="table-wrapper freeze-pane">')
        writeLines(insert_rq2_table(m, g))
        writeLines('</div>')
        writeLines(get_notes())
        
      } # end g loop

      # -------------------------------------------
      # ADDITIONAL: "race_by_firstgen" => goes to RQ2B
      # -------------------------------------------
      for (order_id in orders_for_m) {
        writeLines(str_c("### Research question ", rq_num, " {.hide}"))
        # e.g. "rq2b_los_angeles_order_448375_546954_race_by_firstgen.png"
        graph_type_rbf <- str_c("order_", order_id, "_race_by_firstgen")
        insert_figure(rq = "rq2b", metro = m, graph_type = graph_type_rbf)
      }
      
      # Add RQ2B table
      writeLines(str_c("### Research question ", rq_num, " {.hide}"))
      writeLines(str_c("#### First-generation status by race for ", heading_text, " Geomarkets"))

      writeLines('<div class="table-wrapper freeze-pane">')
      writeLines(insert_rq2_table(m, 'race_firstgen'))
      writeLines('</div>')
      writeLines(get_notes('Excludes students who have missing values for race or parental education. '))
      
      # Add RQ2 map
      writeLines(str_c("### Research question ", rq_num, " {.hide}"))
      writeLines(str_c("#### Purchased student profiles by racial/ethnic composition and first-generation status, ", heading_text))
      
      writeLines(str_c(
        '<iframe data-src="./results/maps/rq2_map_',
        m,
        '.html" src="about:blank" width=100% height=100% style="max-height: 75%" allowtransparency="true"></iframe>'
      ))
      writeLines('<p class="fullscreen">Fullscreen</p>')
      writeLines(get_notes())

    } # end if (rq == "rq2")

  } # end rq loop

} # end metros loop
```

```{r, eval=F}
# A special version insert_figure_aian for AI/AN that does NOT print a heading
insert_figure_aian <- function(rq, metro, graph_type, base_path = graphs_dir) {
  
  fig_file  <- file.path(base_path, rq, paste0(rq, "_", metro, "_", graph_type, ".png"))
  cap_file  <- file.path(base_path, rq, paste0(rq, "_", metro, "_", graph_type, "_title.txt"))
  note_file <- file.path(base_path, rq, paste0(rq, "_", metro, "_", graph_type, "_note.txt"))

  # Instead of printing a heading, let the AI/AN loop do it (#### subtitle).
  # So we skip caption_text or print it differently if you want.

  if (file.exists(fig_file)) {
    writeLines(paste0("![](", fig_file, ")\n"))
  } else {
    writeLines(paste("*(Missing figure file:", fig_file, ")*\n"))
  }

  # Print footnotes (if the .txt file exists)
  if (file.exists(note_file)) {
    notes_txt <- readLines(note_file, warn = FALSE)
    writeLines(
      paste0(
        "<div class=\"footnote\">",
        paste0(notes_txt, collapse = "</br>"),
        "</div>"
      )
    )
  }
}


############################################################################
# 5) AI/AN results loop
############################################################################

# (Level-1) "AI/AN students"
writeLines("# AI/AN students\n")

# The five metros (with 'nyny' last) and the single Native American order
native_metros <- c("chicago", "dallas", "houston", "los_angeles", "nyny")
native_order  <- "487927"

# We want exactly 3 slides per metro, in this order:
var_rc_pairs <- list(
  c("firstgen", "row"),
  c("firstgen", "col"),
  c("race",     "row")
)

for (m in native_metros) {
  
  # (Level-2) heading for each metro (not a slide at slide-level=3)
  heading_text <- if (m == "nyny") {
    "New York City"
  } else {
    m_no_underscores <- gsub("_", " ", m, fixed = TRUE)
    m_title          <- tools::toTitleCase(m_no_underscores)
    paste0(m_title, " area")
  }
  writeLines(paste0("## ", heading_text, "\n"))

  # For each var/rc pair, create a new slide at level-3 (always hidden in TOC)
  for (i in seq_along(var_rc_pairs)) {
    
    g  <- var_rc_pairs[[i]][1]
    rc <- var_rc_pairs[[i]][2]

    # Always hidden from TOC => add "{.hide}" every time
    writeLines(paste0("### ", heading_text, " (AI/AN) {.hide}\n"))

    # (Level-4) subtitle on the same slide
    subtitle <- if (g == "firstgen") {
      "First-generation status composition of purchased AI/AN student profiles by geomarket"
    } else if (g == "race") {
      "Racial composition of purchased AI/AN student profiles by geomarket"
    } else {
      "Other composition of purchased AI/AN student profiles"
    }
    writeLines(paste0("#### ", subtitle, "\n"))

    # Build figure name and call your "no-heading" figure function
    graph_type <- paste0(g, "_", rc, "_plot_", native_order)
    insert_figure_aian(
      rq         = "rq2",
      metro      = m,
      graph_type = graph_type
    )
    
    # Add RQ2 table
    if ((g == 'firstgen' && rc == 'col') | (g == 'race' && rc == 'row')) {
      writeLines(paste0("### ", heading_text, " (AI/AN) {.hide}\n"))
      writeLines(if_else(
        g == 'race',
        str_c('#### Racial/ethnic composition of purchased student profiles by Geomarket, ', heading_text),
        str_c('#### First-generation status of purchased student profiles by Geomarket, ', heading_text)
      ))

      writeLines('<div class="table-wrapper freeze-pane">')
      writeLines(insert_rq2_table(m, g, 'rq2_aian'))
      writeLines('</div>')
      writeLines('<div class="footnote">Figure Notes:<br>- Order number 487927 (ordered 7/19/2019): HS class 2020 OR 2021; Ethnicity/Race = American Indian or Alaska Native; SAT 1040-1600; GPA B- to A+.</div>')
    }
  }
  
  # Add RQ2 map
  writeLines(paste0("### ", heading_text, " (AI/AN) {.hide}\n"))
  writeLines(str_c("#### Purchased AI/AN student profiles by racial/ethnic composition and first-generation status"))
  
  writeLines(str_c(
    '<iframe data-src="./results/maps/rq2_aian_map_',
    m,
    '.html" src="about:blank" width=100% height=100% allowtransparency="true"></iframe>'
  ))
  writeLines('<p class="fullscreen">Fullscreen</p>')
  writeLines('<div class="footnote">Figure Notes:<br>- Order number 487927 (ordered 7/19/2019): HS class 2020 OR 2021; Ethnicity/Race = American Indian or Alaska Native; SAT 1040-1600; GPA B- to A+.</div>')
}
```
